{"version":3,"sources":["components/App.js","reportWebVitals.js","index.js"],"names":["App","props","state","web3","account","token","balance","referralAddress","value","tokensLeft","connection","a","this","loadBlockChainData","checkReferralStatus","loadTokenData","window","ethereum","on","accounts","currentAccount","length","alert","setState","location","reload","chainId","error","request","method","Web3","eth","net","getId","netId","getAccounts","getBalance","Contract","PlayBirdMansion","abi","networks","address","console","log","numberOfBirds","amount","methods","mintBird","send","from","mintBirdWithReferral","totalSupply","call","tokens","result","alreadyReferred","referStatus","e","preventDefault","role","className","onSubmit","amountOfBirds","total","mintBirdsWithReferral","mintBirds","id","step","type","max","placeholder","ref","input","maxLength","minLength","onClick","connectWeb3","toString","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bfffda1f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport PlayBirdMansion from '../abis/PlayBirdMansion.json'\n\nclass App extends Component {\n\n    async componentDidMount() {\n      await this.loadBlockChainData()\n      await this.checkReferralStatus()\n      await this.loadTokenData()\n      window.ethereum.on('accountsChanged', (accounts) => {\n        let currentAccount = this.state.account\n        if(accounts.length === 0) {\n          window.alert(\"Please connect to MetaMask\")\n        } else if (accounts[0] !== currentAccount) {\n          currentAccount = accounts[0]\n          this.setState({account: currentAccount})\n        }\n        window.location.reload()\n      })\n      window.ethereum.on('chainChanged', (chainId) => {\n        if(chainId === '0x89') {\n          this.setState({connection : true})\n        }\n        window.location.reload()\n      })\n      window.ethereum.on('disconnect', (error) => {\n        window.ethereum.request({ method: 'eth_requestAccounts'})\n      })\n    }\n\n    async loadBlockChainData() {\n      if(typeof window.ethereum !== 'undefined') {\n        const web3 = new Web3(window.ethereum)\n        const netId = await web3.eth.net.getId()\n        const accounts = await web3.eth.getAccounts()\n\n        if(typeof accounts[0] !== 'undefined') {\n          const balance = await web3.eth.getBalance(accounts[0])\n          this.setState({ account: accounts[0], balance: balance, web3: web3 })\n        } else {\n          window.alert('Please connect your MetaMask account')\n        }\n\n        try {\n          const token = new web3.eth.Contract(PlayBirdMansion.abi, PlayBirdMansion.networks[netId].address)\n          this.setState({ token: token })\n          this.setState({ connection: true })\n          await this.loadTokenData()\n        } catch(e) {\n          console.log('Error', e)\n          window.alert('Please connect MetaMask to Polygon Network')\n        }\n\n\n      } else {\n        window.alert('Please install MetaMask')\n      }\n\n    }\n\n    async mintBirds(numberOfBirds, amount) {\n      if(this.state.token !== 'undefined') {\n        try {\n          await this.state.token.methods.mintBird(numberOfBirds).send({ value: amount, from: this.state.account })\n          window.location.reload()\n        } catch (e) {\n          console.log('Error, mintBird: ', e)\n        }\n      }\n    }\n\n    async mintBirdsWithReferral(numberOfBirds, amount, referralAddress) {\n      if(this.state.token !== 'undefined') {\n        try {\n          await this.state.token.methods.mintBirdWithReferral(numberOfBirds, referralAddress).send({ value: amount, from: this.state.account})\n          window.location.reload()\n        } catch (e) {\n          console.log('Error, mintBirdWithReferral: ', e)\n        }\n      }\n    }\n\n    async loadTokenData() {\n      if(this.state.token !== null) {\n        let tokens = await this.state.token.methods.totalSupply().call()\n        let tokensLeft =  6969 - tokens\n        this.setState({ tokensLeft: tokensLeft })\n      }\n    }\n\n    async checkReferralStatus() {\n      let result = false\n      if(this.state.token !== null) {\n        if(this.state.account !== '') {\n          result = await this.state.token.methods.alreadyReferred(this.state.account).call()\n          this.setState({ referStatus: result })\n        }\n      }\n      return result\n    }\n\n    async connectWeb3(e) {\n      e.preventDefault()\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n        const account = accounts[0];\n        this.setState({account: account})\n    }\n\n\n    constructor(props) {\n      super(props)\n      this.state = {\n        web3: 'undefined',\n        account: '',\n        token: null,\n        balance: 0,\n        referralAddress: {\n          value: ''\n        },\n        tokensLeft: 0,\n        connection: false\n      }\n    }\n\n    render() {\n      return (\n\n\n        <main role=\"main\" className=\"col-lg-12 d-flex justify-content-center text-white \">\n          <div className=\"content mr-auto ml-auto\">\n              <div>\n                  <br></br>\n                  (minting a bird will cost 20 Matics (Polygon Network))\n                  <br></br>\n                  (can mint up to 20 birds per transaction)\n                  <br></br>\n                  (use a referral for a 2 MATIC discount per mint)\n                  <form onSubmit={(e) => {\n                    e.preventDefault()\n                    let amount = this.amountOfBirds.value\n                    let total = amount * 20// convert to wei\n\n                    if(this.referralAddress.value !== '') {\n                      total = total - (2*amount)\n                      total = total * (10**18)\n                      this.mintBirdsWithReferral(amount, total, this.referralAddress.value)\n                    } else {\n                      total = total * (10**18)\n                      this.mintBirds(amount, total)\n                    }\n\n\n                  }}>\n                  <div className='form-group mr-sm-2'>\n                  <br></br>\n                    <input\n                      id='numBirds'\n                      step='1'\n                      type='number'\n                      max='20'\n                      className=\"form-control form-control-md\"\n                      placeholder=\"How many birds to mint?\"\n                      ref={(input) => { this.amountOfBirds = input }}\n                    />\n                  <br></br>\n\n                    { this.state.referStatus ? \"\" :\n                      <input\n                        id='referral'\n                        maxLength='42'\n                        minLength='42'\n                        className=\"form-control form-control-md\"\n                        placeholder=\"(Optional) referral address 0x...\"\n                        ref={(input) => { this.referralAddress = input }}\n                      />\n                    }\n                  </div>\n                  <br></br>\n                  <button type='submit' className='btn btn-primary'>MINT</button>\n                </form>\n              </div>\n            <div>\n              <br></br>\n              { this.state.account !== '' ? \"Web3 Connected\" : <button type='submit' className='btn btn-primary' onClick={(e) => this.connectWeb3(e)}>Connect Web3</button> }\n\n              <br></br>\n              Account:\n              <h6><span>{this.state.account}</span></h6>\n              <br></br>\n              <br></br>\n              <br></br>\n              {this.state.connection ? <h3>{(this.state.tokensLeft).toString()}/6969 Birds Remaining</h3> : <h3>Please connect MetaMask to Polygon Network</h3> }\n            </div>\n          </div>\n        </main>\n\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './components/App.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}